{
  // Place your server workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "New Service": {
    "scope": "typescript",
    "prefix": "NewService",
    "body": [
      "import { Service } from 'moleculer-decorators';",
      "",
      "import { BaseService } from 'utils/BaseService';",
      "",
      "@Service({",
      "  name: '$1',",
      "  mixins: [],",
      "  settings: {},",
      "})",
      "class $2 extends BaseService {",
      "}",
      "",
      "export = $2;"
    ],
    "description": "New Service"
  },
  "New Service With GraphQL": {
    "scope": "typescript",
    "prefix": "NewServiceGraphQL",
    "body": [
      "import { Service } from 'moleculer-decorators';",
      "",
      "import { BaseService } from 'utils/BaseService';",
      "import { GraphQLMixin } from 'mixins/graphql.mixin';",
      "import schema from './graphql/$1.schema';",
      "",
      "@Service({",
      "  name: '$1',",
      "  mixins: [",
      "    GraphQLMixin(),",
      "  ],",
      "  settings: {",
      "    graphql: {",
      "      type: schema,",
      "    },",
      "  },",
      "})",
      "class $2 extends BaseService {",
      "}",
      "",
      "export = $2;"
    ],
    "description": "New Service with GraphQL"
  },
  "New Service With GraphQL And DB": {
    "scope": "typescript",
    "prefix": "NewServiceGraphQLAndDB",
    "body": [
      "import { Service } from 'moleculer-decorators';",
      "",
      "import { BaseService } from 'utils/BaseService';",
      "import { KnexDBMixin } from 'mixins/knexdb.mixin';",
      "import { GraphQLMixin } from 'mixins/graphql.mixin';",
      "import schema from './graphql/$1.schema';",
      "",
      "@Service({",
      "  name: '$1',",
      "  mixins: [",
      "    KnexDBMixin({",
      "      schema: '',",
      "      table: '',",
      "      idField: '',",
      "    }),",
      "    GraphQLMixin(),",
      "  ],",
      "  settings: {",
      "    graphql: {",
      "      type: schema,",
      "    },",
      "  },",
      "})",
      "class $2 extends BaseService {",
      "}",
      "",
      "export = $2;"
    ],
    "description": "New Service with GraphQL and DB"
  },
  "New Service With DB": {
    "scope": "typescript",
    "prefix": "NewServiceDB",
    "body": [
      "import { Service } from 'moleculer-decorators';",
      "",
      "import { BaseService } from 'utils/BaseService';",
      "import { KnexDBMixin } from 'mixins/knexdb.mixin';",
      "",
      "@Service({",
      "  name: '$1',",
      "  mixins: [",
      "    KnexDBMixin({",
      "      schema: '$3',",
      "      table: '$4',",
      "      idField: '',",
      "    }),",
      "  ],",
      "  settings: {},",
      "})",
      "class $2 extends BaseService {",
      "}",
      "",
      "export = $2;"
    ],
    "description": "New Service with DB"
  }
}
